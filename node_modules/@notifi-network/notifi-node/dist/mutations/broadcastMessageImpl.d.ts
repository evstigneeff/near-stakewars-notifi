declare type KeyValuePair<TKey, TValue> = Readonly<{
    key: TKey;
    value: TValue;
}>;
declare type TargetType = 'SMS' | 'EMAIL' | 'TELEGRAM';
export declare type BroadcastMessageInput = Readonly<{
    topicName: string;
    idempotencyKey?: string;
    targetTemplates?: ReadonlyArray<KeyValuePair<TargetType, string>>;
    variables?: ReadonlyArray<KeyValuePair<string, string>>;
}>;
export declare type BroadcastMessageResult = Readonly<{
    id: string | null;
}>;
declare const broadcastMessageImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, jwt: string, variables: Readonly<{
    topicName: string;
    idempotencyKey?: string | undefined;
    targetTemplates?: readonly Readonly<{
        key: TargetType;
        value: string;
    }>[] | undefined;
    variables?: readonly Readonly<{
        key: string;
        value: string;
    }>[] | undefined;
}>) => Promise<Readonly<{
    id: string | null;
}>>;
export default broadcastMessageImpl;
//# sourceMappingURL=broadcastMessageImpl.d.ts.map