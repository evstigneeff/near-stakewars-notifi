import type { WalletBlockchain } from '../types';
export declare type CreateTenantUserInput = Readonly<{
    input: Readonly<{
        walletBlockchain: WalletBlockchain;
        walletPublicKey: string;
    }>;
}>;
export declare type CreateTenantUserResult = Readonly<{
    id: string;
}>;
declare const createTenantUserImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, jwt: string, variables: Readonly<{
    input: Readonly<{
        walletBlockchain: WalletBlockchain;
        walletPublicKey: string;
    }>;
}>) => Promise<Readonly<{
    id: string;
}>>;
export default createTenantUserImpl;
//# sourceMappingURL=createTenantUserImpl.d.ts.map