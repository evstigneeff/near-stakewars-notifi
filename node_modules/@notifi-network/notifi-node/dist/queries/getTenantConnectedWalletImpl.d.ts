import type { ConnectedWallet, Connection, WalletBlockchain } from '../types';
export declare type GetTenantConnectedWalletInput = Readonly<{
    input?: Readonly<{
        userWallets: ReadonlyArray<string>;
        userWalletsBlockchain: WalletBlockchain;
    }>;
    first?: number;
    after?: string;
}>;
export declare type GetTenantConnectedWalletResult = Connection<ConnectedWallet>;
declare const getTenantConnectedWalletImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, jwt: string, variables: Readonly<{
    input?: Readonly<{
        userWallets: ReadonlyArray<string>;
        userWalletsBlockchain: WalletBlockchain;
    }> | undefined;
    first?: number | undefined;
    after?: string | undefined;
}>) => Promise<Readonly<{
    pageInfo: Readonly<{
        hasNextPage: boolean;
        endCursor: string;
    }>;
    nodes: readonly Readonly<{
        address: string;
        walletBlockchain: WalletBlockchain;
        user: Readonly<{
            alerts: readonly import("../types").UserAlert[];
        }>;
    }>[];
}>>;
export default getTenantConnectedWalletImpl;
//# sourceMappingURL=getTenantConnectedWalletImpl.d.ts.map