"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mutations_1 = require("../mutations");
const broadcastMessageImpl_1 = __importDefault(require("../mutations/broadcastMessageImpl"));
const queries_1 = require("../queries");
const types_1 = require("../types");
class NotifiClient {
    constructor(a) {
        this.a = a;
        this.logIn = async ({ sid, secret }) => {
            const input = { sid, secret };
            return await (0, mutations_1.logInFromServiceImpl)(this.a, { input });
        };
        this.sendSimpleHealthThreshold = async (jwt, _a) => {
            var { key, walletPublicKey, walletBlockchain } = _a, payload = __rest(_a, ["key", "walletPublicKey", "walletBlockchain"]);
            const message = (0, types_1.newSimpleHealthThresholdMessage)(payload);
            const input = {
                walletPublicKey,
                walletBlockchain,
                messageKey: key,
                messageType: message.type,
                message: JSON.stringify(message.payload),
            };
            const result = await (0, mutations_1.sendMessageImpl)(this.a, jwt, { input });
            if (!result) {
                throw new Error('Send message failed');
            }
        };
        this.sendBroadcastMessage = async (jwt, params) => {
            const result = await (0, broadcastMessageImpl_1.default)(this.a, jwt, params);
            if (result.id === null) {
                throw new Error('broadcast message failed');
            }
        };
        this.sendDirectPush = async (jwt, { key, walletPublicKey, walletBlockchain, message, template, type }) => {
            var _a, _b, _c;
            let directMessage;
            if (message !== undefined) {
                directMessage = (0, types_1.newDirectTenantMessage)({ message, type });
            }
            else if (template !== undefined) {
                directMessage = (0, types_1.newDirectTenantMessage)({
                    message: '',
                    type,
                    targetTemplates: {
                        SMS: (_a = template.smsTemplate) !== null && _a !== void 0 ? _a : undefined,
                        Email: (_b = template.emailTemplate) !== null && _b !== void 0 ? _b : undefined,
                        Telegram: (_c = template.telegramTemplate) !== null && _c !== void 0 ? _c : undefined,
                    },
                    templateVariables: template.variables,
                });
            }
            else {
                throw new Error('One of message or template must be set');
            }
            const input = {
                walletPublicKey,
                walletBlockchain,
                messageKey: key,
                messageType: directMessage.type,
                message: JSON.stringify(directMessage.payload),
            };
            const result = await (0, mutations_1.sendMessageImpl)(this.a, jwt, { input });
            if (!result) {
                throw new Error('Send message failed');
            }
        };
        this.deleteUserAlert = async (jwt, { alertId }) => {
            await (0, mutations_1.deleteUserAlertImpl)(this.a, jwt, { alertId });
            return alertId;
        };
        this.createTenantUser = async (jwt, { walletBlockchain, walletPublicKey }) => {
            const result = await (0, mutations_1.createTenantUserImpl)(this.a, jwt, {
                input: { walletBlockchain, walletPublicKey },
            });
            return result.id;
        };
        this.createDirectPushAlert = async (jwt, { userId, emailAddresses, phoneNumbers, telegramIds }) => {
            const input = {
                userId,
                emailAddresses: emailAddresses !== null && emailAddresses !== void 0 ? emailAddresses : [],
                phoneNumbers: phoneNumbers !== null && phoneNumbers !== void 0 ? phoneNumbers : [],
                telegramIds: telegramIds !== null && telegramIds !== void 0 ? telegramIds : [],
            };
            return await (0, mutations_1.createDirectPushAlertImpl)(this.a, jwt, {
                input,
            });
        };
        this.deleteDirectPushAlert = async (jwt, { alertId }) => {
            const input = { alertId };
            return await (0, mutations_1.deleteDirectPushAlertImpl)(this.a, jwt, { input });
        };
        this.getTenantConnectedWallet = async (jwt, params) => {
            return await (0, queries_1.getTenantConnectedWalletImpl)(this.a, jwt, params);
        };
    }
}
exports.default = NotifiClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2NsaWVudC9Ob3RpZmlDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQU9zQjtBQUN0Qiw2RkFFMkM7QUFDM0Msd0NBQTBEO0FBVzFELG9DQUdrQjtBQUdsQixNQUFNLFlBQVk7SUFDaEIsWUFBb0IsQ0FBWTtRQUFaLE1BQUMsR0FBRCxDQUFDLENBQVc7UUFFaEMsVUFBSyxHQUt5QixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtZQUN0RCxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUM5QixPQUFPLE1BQU0sSUFBQSxnQ0FBb0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7UUFFRiw4QkFBeUIsR0FRSixLQUFLLEVBQ3hCLEdBQUcsRUFDSCxFQUFzRCxFQUN0RCxFQUFFO2dCQURGLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsT0FBYyxFQUFULE9BQU8sY0FBcEQsOENBQXNELENBQUY7WUFFcEQsTUFBTSxPQUFPLEdBQUcsSUFBQSx1Q0FBK0IsRUFBQyxPQUFPLENBQUMsQ0FBQztZQUN6RCxNQUFNLEtBQUssR0FBRztnQkFDWixlQUFlO2dCQUNmLGdCQUFnQjtnQkFDaEIsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsV0FBVyxFQUFFLE9BQU8sQ0FBQyxJQUFJO2dCQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO2FBQ3pDLENBQUM7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsMkJBQWUsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFD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